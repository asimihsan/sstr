name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-docker-verification:
    name: Build verification Docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image-name: ${{ steps.image-info.outputs.image-name }}
      image-digest: ${{ steps.build-image.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Set up Docker image metadata
        id: image-info
        run: |
          # Create a deterministic image name based on the repository
          repo="${GITHUB_REPOSITORY,,}"  # Convert to lowercase
          echo "image-name=ghcr.io/${repo}/sstr-verification" >> $GITHUB_OUTPUT
          # Use SHA for PR builds, 'latest' for main branch pushes
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "image-tag=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
          else
            echo "image-tag=latest" >> $GITHUB_OUTPUT
          fi

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        id: cache-image
        uses: actions/cache@v3
        with:
          path: /tmp/docker-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Build and push Docker image
        id: build-image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.image-info.outputs.image-name }}:${{ steps.image-info.outputs.image-tag }}
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/docker-cache
          cache-to: type=local,dest=/tmp/docker-cache,mode=max

  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake clang-format valgrind

      - name: Build
        run: make all

      - name: Run standard tests
        run: make check

      - name: Test with format validation enabled (default)
        run: make test_validation

      - name: Test with format validation disabled
        run: |
          make clean
          make NO_FORMAT_VALIDATION=1
          make test_validation NO_FORMAT_VALIDATION=1
          ./test_validation

      - name: Test with custom allowed specifiers
        run: |
          make clean
          make ALLOWED_SPECIFIERS="ds"
          make test_validation
          ./test_validation

      - name: Check code formatting
        run: make format-check

      - name: Check copyright headers
        run: |
          go install github.com/google/addlicense@latest
          make copyright-check
        continue-on-error: true

      - name: Verify single-include file is up-to-date
        run: make verify-single-include

  formal-verification:
    name: Formal verification (CBMC & KLEE)
    runs-on: ubuntu-latest
    needs: build-docker-verification
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        run: docker pull ${{ needs.build-docker-verification.outputs.image-name }}:${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || 'latest' }}

      - name: Tag image as expected by make commands
        run: docker tag ${{ needs.build-docker-verification.outputs.image-name }}:${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || 'latest' }} sstr-verification:latest

      - name: Run CBMC verification
        run: make cbmc-verify

      - name: Run KLEE verification
        run: make klee-docker-all

      - name: Display KLEE results
        run: make klee-results-docker

  valgrind:
    runs-on: ubuntu-latest
    needs: build-docker-verification
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        run: docker pull ${{ needs.build-docker-verification.outputs.image-name }}:${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || 'latest' }}

      - name: Tag image as expected by make commands
        run: docker tag ${{ needs.build-docker-verification.outputs.image-name }}:${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || 'latest' }} sstr-verification:latest

      - name: Run Valgrind in Docker
        run: make valgrind-verify

  # Optional MacOS build for cross-platform validation
  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          brew install cmake

      - name: Build
        run: make all

      - name: Run standard tests
        run: make check

      - name: Test with format validation enabled (default)
        run: make test_validation

      - name: Test with format validation disabled
        run: |
          make clean
          make NO_FORMAT_VALIDATION=1
          make test_validation NO_FORMAT_VALIDATION=1
          ./test_validation
